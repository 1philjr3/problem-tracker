import { 
  collection, 
  doc, 
  addDoc, 
  updateDoc, 
  deleteDoc, 
  getDocs, 
  getDoc, 
  query, 
  where, 
  orderBy, 
  serverTimestamp,
  writeBatch,
  setDoc
} from 'firebase/firestore';
import { db } from '../config/firebase';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –∏–∑ localDataService –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export interface LocalUser {
  id: string;
  email: string;
  fullName: string;
  totalPoints: number;
  totalProblems: number;
  level: 'novice' | 'fighter' | 'master';
  joinedAt: string;
  lastActive: string;
  isAdmin?: boolean;
}

export interface LocalProblem {
  id: string;
  title: string;
  description: string;
  category: string;
  authorId: string;
  authorName: string;
  images: string[]; // base64 —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  points: number;
  status: 'pending' | 'reviewed';
  reviewed: boolean;
  reviewedAt?: string;
  reviewedBy?: string;
  createdAt: string;
  adminNotes?: string;
}

export interface PointsHistory {
  id: string;
  userId: string;
  problemId: string;
  points: number;
  reason: string;
  createdAt: string;
  adminId?: string;
}

export interface SeasonSettings {
  currentSeason: string;
  seasonStartDate: string;
  seasonEndDate: string;
  isActive: boolean;
  lastBackup: string;
}

export interface LocalDatabase {
  users: LocalUser[];
  problems: LocalProblem[];
  pointsHistory: PointsHistory[];
  settings: SeasonSettings;
}

class CloudDataService {
  // –ö–æ–ª–ª–µ–∫—Ü–∏–∏ Firestore
  private readonly USERS_COLLECTION = 'users';
  private readonly PROBLEMS_COLLECTION = 'problems';
  private readonly SETTINGS_COLLECTION = 'settings';
  private readonly POINTS_HISTORY_COLLECTION = 'pointsHistory';

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  async initialize(): Promise<void> {
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–ª–∞—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    try {
      const settingsRef = doc(db, this.SETTINGS_COLLECTION, 'current');
      const settingsSnap = await getDoc(settingsRef);
      
      if (!settingsSnap.exists()) {
        const initialSettings: SeasonSettings = {
          currentSeason: 'season-2024',
          seasonStartDate: new Date().toISOString(),
          seasonEndDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),
          isActive: true,
          lastBackup: new Date().toISOString(),
        };
        
        await setDoc(settingsRef, initialSettings);
        console.log('üìù –°–æ–∑–¥–∞–Ω—ã –Ω–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ–∑–æ–Ω–∞');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    }

    console.log('‚úÖ –û–±–ª–∞—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞!');
    console.log('‚òÅÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: Firebase Firestore');
    console.log('üëë –ê–¥–º–∏–Ω: admin@mail.ru (–Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ)');
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∫–∞–∫ base64)
  async saveImage(file: File): Promise<string> {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      
      reader.onload = () => {
        try {
          const base64 = reader.result as string;
          const fileName = `${Date.now()}_${Math.random().toString(36).substring(2)}_${file.name}`;
          
          console.log(`üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${fileName}`);
          
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º base64 —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          resolve(base64);
        } catch (error) {
          reject(error);
        }
      };
      
      reader.onerror = reject;
      reader.readAsDataURL(file);
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  async getImage(fileName: string): Promise<string | null> {
    // –í –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ fileName —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è base64 —Å—Ç—Ä–æ–∫–æ–π
    return fileName;
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async saveUser(userData: Omit<LocalUser, 'totalPoints' | 'totalProblems' | 'level'>): Promise<LocalUser> {
    try {
      const userRef = doc(db, this.USERS_COLLECTION, userData.id);
      const userSnap = await getDoc(userRef);
      
      let user: LocalUser;
      
      if (userSnap.exists()) {
        const existingUser = userSnap.data() as LocalUser;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = {
          ...existingUser,
          ...userData,
          lastActive: new Date().toISOString(),
          isAdmin: userData.email === 'admin@mail.ru'
        };
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤–æ–µ –§–ò–û, –æ–±–Ω–æ–≤–ª—è–µ–º
        if (userData.fullName && userData.fullName !== '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' && !userData.fullName.includes('@')) {
          user.fullName = userData.fullName;
        }
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = {
          ...userData,
          totalPoints: 0,
          totalProblems: 0,
          level: 'novice',
          joinedAt: new Date().toISOString(),
          lastActive: new Date().toISOString(),
          isAdmin: userData.email === 'admin@mail.ru'
        };
      }
      
      await setDoc(userRef, user);
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', user.email);
      
      return user;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserDisplayName(userId: string, email: string): Promise<string> {
    try {
      const userRef = doc(db, this.USERS_COLLECTION, userId);
      const userSnap = await getDoc(userRef);
      
      if (userSnap.exists()) {
        const userData = userSnap.data() as LocalUser;
        if (userData.fullName && userData.fullName !== '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' && !userData.fullName.includes('@')) {
          return userData.fullName;
        }
      }
      
      // –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —á–∞—Å—Ç—å email –¥–æ @
      return email.split('@')[0];
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return email.split('@')[0];
    }
  }

  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  async fixUserNames(): Promise<void> {
    try {
      const usersQuery = query(collection(db, this.USERS_COLLECTION));
      const usersSnapshot = await getDocs(usersQuery);
      
      const batch = writeBatch(db);
      let hasChanges = false;
      
      usersSnapshot.docs.forEach(userDoc => {
        const user = userDoc.data() as LocalUser;
        
        if (user.fullName === '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' && user.email) {
          const emailName = user.email.split('@')[0];
          batch.update(userDoc.ref, { fullName: emailName });
          hasChanges = true;
          console.log(`üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.email} ‚Üí ${emailName}`);
        }
      });
      
      if (hasChanges) {
        await batch.commit();
        console.log('‚úÖ –ò–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω:', error);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUser(userId: string): Promise<LocalUser | null> {
    try {
      const userRef = doc(db, this.USERS_COLLECTION, userId);
      const userSnap = await getDoc(userRef);
      
      if (userSnap.exists()) {
        return userSnap.data() as LocalUser;
      }
      
      return null;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return null;
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
  async addProblem(problemData: Omit<LocalProblem, 'id' | 'points' | 'status' | 'reviewed' | 'createdAt'>): Promise<LocalProblem> {
    try {
      const problem: Omit<LocalProblem, 'id'> = {
        ...problemData,
        points: 1,
        status: 'pending',
        reviewed: false,
        createdAt: new Date().toISOString(),
      };

      const docRef = await addDoc(collection(db, this.PROBLEMS_COLLECTION), problem);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.updateUserStats(problemData.authorId, 1, 1);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –±–∞–ª–ª–æ–≤
      await this.addPointsHistory(problemData.authorId, docRef.id, 1, '–ë–∞–∑–æ–≤—ã–µ –±–∞–ª–ª—ã –∑–∞ –ø—Ä–æ–±–ª–µ–º—É');

      const finalProblem: LocalProblem = {
        id: docRef.id,
        ...problem
      };

      console.log('‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:', finalProblem.title);
      return finalProblem;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º
  async getProblems(): Promise<LocalProblem[]> {
    try {
      const q = query(
        collection(db, this.PROBLEMS_COLLECTION),
        orderBy('createdAt', 'desc')
      );
      const querySnapshot = await getDocs(q);
      
      return querySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      } as LocalProblem));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º:', error);
      return [];
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤
  async addBonusPoints(problemId: string, points: number, reason: string, adminId: string): Promise<void> {
    try {
      const problemRef = doc(db, this.PROBLEMS_COLLECTION, problemId);
      const problemSnap = await getDoc(problemRef);
      
      if (!problemSnap.exists()) {
        throw new Error('–ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }

      const problemData = problemSnap.data() as LocalProblem;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–ª—ã –ø—Ä–æ–±–ª–µ–º—ã
      await updateDoc(problemRef, {
        points: problemData.points + points
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.updateUserStats(problemData.authorId, points, 0);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
      await this.addPointsHistory(problemData.authorId, problemId, points, reason, adminId);

      console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${points} –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –∑–∞ –ø—Ä–æ–±–ª–µ–º—É: ${problemData.title}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ (–±–µ–∑ –∞–¥–º–∏–Ω–∞)
  async getLeaderboard(): Promise<LocalUser[]> {
    try {
      const q = query(
        collection(db, this.USERS_COLLECTION),
        where('totalPoints', '>', 0),
        orderBy('totalPoints', 'desc')
      );
      const querySnapshot = await getDocs(q);
      
      return querySnapshot.docs
        .map(doc => doc.data() as LocalUser)
        .filter(user => !user.isAdmin) // –ò—Å–∫–ª—é—á–∞–µ–º –∞–¥–º–∏–Ω–∞
        .map((user, index) => ({ ...user, rank: index + 1 }));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞:', error);
      return [];
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  async getAllData(): Promise<LocalDatabase> {
    try {
      const [users, problems, pointsHistory, settings] = await Promise.all([
        this.getAllUsers(),
        this.getProblems(),
        this.getPointsHistory(),
        this.getSeasonSettings()
      ]);

      return {
        users,
        problems,
        pointsHistory,
        settings
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      return {
        users: [],
        problems: [],
        pointsHistory: [],
        settings: {
          currentSeason: 'season-2024',
          seasonStartDate: new Date().toISOString(),
          seasonEndDate: new Date().toISOString(),
          isActive: true,
          lastBackup: new Date().toISOString(),
        }
      };
    }
  }

  // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
  async exportData(): Promise<void> {
    try {
      const data = await this.getAllData();
      const exportData = {
        ...data,
        exportedAt: new Date().toISOString(),
        version: '1.0',
      };
      
      const jsonString = JSON.stringify(exportData, null, 2);
      const blob = new Blob([jsonString], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      
      const a = document.createElement('a');
      a.href = url;
      a.download = `problem-tracker-export-${new Date().toISOString().split('T')[0]}.json`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      console.log('üì¶ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ Firebase');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
  async isAdmin(userId: string, email: string): Promise<boolean> {
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞: userId=${userId}, email=${email}`);
    return email === 'admin@mail.ru';
  }

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–æ–º
  async updateSeasonSettings(newSettings: Partial<SeasonSettings>, adminId: string, adminEmail: string): Promise<void> {
    const isAdminUser = await this.isAdmin(adminId, adminEmail);
    console.log(`üîç updateSeasonSettings: adminId=${adminId}, adminEmail=${adminEmail}, isAdmin=${isAdminUser}`);
    
    if (!isAdminUser) {
      throw new Error('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–µ–∑–æ–Ω–æ–º');
    }

    try {
      const settingsRef = doc(db, this.SETTINGS_COLLECTION, 'current');
      await updateDoc(settingsRef, newSettings);
      console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ–∑–æ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–æ–º');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ–∑–æ–Ω–∞:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ–∑–æ–Ω–∞
  async getSeasonSettings(): Promise<SeasonSettings> {
    try {
      const settingsRef = doc(db, this.SETTINGS_COLLECTION, 'current');
      const settingsSnap = await getDoc(settingsRef);
      
      if (settingsSnap.exists()) {
        return settingsSnap.data() as SeasonSettings;
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const defaultSettings: SeasonSettings = {
          currentSeason: 'season-2024',
          seasonStartDate: new Date().toISOString(),
          seasonEndDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),
          isActive: true,
          lastBackup: new Date().toISOString(),
        };
        
        await setDoc(settingsRef, defaultSettings);
        return defaultSettings;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ–∑–æ–Ω–∞:', error);
      return {
        currentSeason: 'season-2024',
        seasonStartDate: new Date().toISOString(),
        seasonEndDate: new Date().toISOString(),
        isActive: true,
        lastBackup: new Date().toISOString(),
      };
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async deleteUser(userId: string, adminId: string, adminEmail: string): Promise<void> {
    const isAdminUser = await this.isAdmin(adminId, adminEmail);
    console.log(`üîç deleteUser: adminId=${adminId}, adminEmail=${adminEmail}, isAdmin=${isAdminUser}`);
    
    if (!isAdminUser) {
      throw new Error('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }

    if (userId === adminId) {
      throw new Error('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç');
    }

    try {
      const batch = writeBatch(db);

      // –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const problemsQuery = query(
        collection(db, this.PROBLEMS_COLLECTION),
        where('authorId', '==', userId)
      );
      const problemsSnapshot = await getDocs(problemsQuery);
      
      problemsSnapshot.docs.forEach(doc => {
        batch.delete(doc.ref);
      });

      // –£–¥–∞–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –±–∞–ª–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const historyQuery = query(
        collection(db, this.POINTS_HISTORY_COLLECTION),
        where('userId', '==', userId)
      );
      const historySnapshot = await getDocs(historyQuery);
      
      historySnapshot.docs.forEach(doc => {
        batch.delete(doc.ref);
      });

      // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userRef = doc(db, this.USERS_COLLECTION, userId);
      batch.delete(userRef);

      await batch.commit();
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω–æ–º');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      throw error;
    }
  }

  // –°–±—Ä–æ—Å —Å–µ–∑–æ–Ω–∞
  async resetSeason(adminId: string, adminEmail: string): Promise<void> {
    const isAdminUser = await this.isAdmin(adminId, adminEmail);
    console.log(`üîç resetSeason: adminId=${adminId}, adminEmail=${adminEmail}, isAdmin=${isAdminUser}`);
    
    if (!isAdminUser) {
      throw new Error('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å —Å–µ–∑–æ–Ω');
    }

    try {
      const batch = writeBatch(db);

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã
      const problemsQuery = query(collection(db, this.PROBLEMS_COLLECTION));
      const problemsSnapshot = await getDocs(problemsQuery);
      problemsSnapshot.docs.forEach(doc => {
        batch.delete(doc.ref);
      });

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –±–∞–ª–ª–æ–≤
      const historyQuery = query(collection(db, this.POINTS_HISTORY_COLLECTION));
      const historySnapshot = await getDocs(historyQuery);
      historySnapshot.docs.forEach(doc => {
        batch.delete(doc.ref);
      });

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const usersQuery = query(collection(db, this.USERS_COLLECTION));
      const usersSnapshot = await getDocs(usersQuery);
      usersSnapshot.docs.forEach(doc => {
        batch.update(doc.ref, {
          totalPoints: 0,
          totalProblems: 0,
          level: 'novice'
        });
      });

      await batch.commit();
      console.log('‚úÖ –°–µ–∑–æ–Ω —Å–±—Ä–æ—à–µ–Ω –∞–¥–º–∏–Ω–æ–º');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å–µ–∑–æ–Ω–∞:', error);
      throw error;
    }
  }

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–∞
  async finishSeason(adminId: string, adminEmail: string): Promise<{ winners: LocalUser[], report: any }> {
    const isAdminUser = await this.isAdmin(adminId, adminEmail);
    console.log(`üîç finishSeason: adminId=${adminId}, adminEmail=${adminEmail}, isAdmin=${isAdminUser}`);
    
    if (!isAdminUser) {
      throw new Error('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∞—Ç—å —Å–µ–∑–æ–Ω');
    }

    try {
      const leaderboard = await this.getLeaderboard();
      const winners = leaderboard.slice(0, 3); // –¢–æ–ø-3

      const report = {
        finishedAt: new Date().toISOString(),
        totalParticipants: leaderboard.length,
        totalProblems: (await this.getProblems()).length,
        winners: winners.map(user => ({
          name: user.fullName,
          points: user.totalPoints,
          problems: user.totalProblems
        }))
      };

      // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ–∑–æ–Ω–∞
      await this.updateSeasonSettings({
        isActive: false,
        lastBackup: new Date().toISOString()
      }, adminId, adminEmail);

      console.log('‚úÖ –°–µ–∑–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω –∞–¥–º–∏–Ω–æ–º');
      return { winners, report };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ–∑–æ–Ω–∞:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ —Å–µ–∑–æ–Ω—É
  async getSeasonReport(): Promise<any | null> {
    try {
      const [users, problems] = await Promise.all([
        this.getLeaderboard(),
        this.getProblems()
      ]);

      return {
        totalParticipants: users.length,
        totalProblems: problems.length,
        topUsers: users.slice(0, 5),
        categoriesStats: this.calculateCategoriesStats(problems),
        generatedAt: new Date().toISOString()
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞:', error);
      return null;
    }
  }

  // –û—Ç–º–µ—Ç–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–π
  async markProblemAsReviewed(problemId: string, adminId: string, adminEmail: string): Promise<void> {
    const isAdminUser = await this.isAdmin(adminId, adminEmail);
    
    if (!isAdminUser) {
      throw new Error('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–º–µ—á–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã');
    }

    try {
      const problemRef = doc(db, this.PROBLEMS_COLLECTION, problemId);
      const problemSnap = await getDoc(problemRef);
      
      if (!problemSnap.exists()) {
        throw new Error('–ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }

      const problemData = problemSnap.data() as LocalProblem;

      await updateDoc(problemRef, {
        reviewed: !problemData.reviewed,
        reviewedAt: problemData.reviewed ? null : new Date().toISOString(),
        reviewedBy: problemData.reviewed ? null : adminId
      });

      console.log('‚úÖ –°—Ç–∞—Ç—É—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–±–ª–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:', error);
      throw error;
    }
  }

  // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã

  private async getAllUsers(): Promise<LocalUser[]> {
    try {
      const usersQuery = query(collection(db, this.USERS_COLLECTION));
      const usersSnapshot = await getDocs(usersQuery);
      
      return usersSnapshot.docs.map(doc => doc.data() as LocalUser);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
      return [];
    }
  }

  private async getPointsHistory(): Promise<PointsHistory[]> {
    try {
      const historyQuery = query(
        collection(db, this.POINTS_HISTORY_COLLECTION),
        orderBy('createdAt', 'desc')
      );
      const historySnapshot = await getDocs(historyQuery);
      
      return historySnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      } as PointsHistory));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–ª–ª–æ–≤:', error);
      return [];
    }
  }

  private async updateUserStats(userId: string, pointsDelta: number, problemsDelta: number): Promise<void> {
    try {
      const userRef = doc(db, this.USERS_COLLECTION, userId);
      const userSnap = await getDoc(userRef);
      
      if (userSnap.exists()) {
        const userData = userSnap.data() as LocalUser;
        const newTotalPoints = userData.totalPoints + pointsDelta;
        const newTotalProblems = userData.totalProblems + problemsDelta;
        
        const newLevel = this.calculateLevel(newTotalPoints);

        await updateDoc(userRef, {
          totalPoints: newTotalPoints,
          totalProblems: newTotalProblems,
          level: newLevel,
          lastActive: new Date().toISOString()
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
  }

  private async addPointsHistory(userId: string, problemId: string, points: number, reason: string, adminId?: string): Promise<void> {
    try {
      const historyEntry: Omit<PointsHistory, 'id'> = {
        userId,
        problemId,
        points,
        reason,
        createdAt: new Date().toISOString(),
        adminId
      };

      await addDoc(collection(db, this.POINTS_HISTORY_COLLECTION), historyEntry);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–ª–ª–æ–≤:', error);
    }
  }

  private calculateLevel(points: number): 'novice' | 'fighter' | 'master' {
    if (points >= 10) return 'master';
    if (points >= 5) return 'fighter';
    return 'novice';
  }

  private calculateCategoriesStats(problems: LocalProblem[]): any {
    const stats: { [key: string]: number } = {};
    
    problems.forEach(problem => {
      stats[problem.category] = (stats[problem.category] || 0) + 1;
    });
    
    return stats;
  }
}

export const cloudDataService = new CloudDataService(); 