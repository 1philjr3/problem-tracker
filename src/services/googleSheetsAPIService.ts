// –ü—Ä–æ—Å—Ç–æ–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets —á–µ—Ä–µ–∑ Web App

interface SurveyData {
  title: string;
  category: string;
  metric: string;
  description: string;
  imageBase64?: string;
  timestamp?: string;
  authorId?: string;
  authorName?: string;
}

class GoogleSheetsAPIService {
  private webAppUrl: string = '';

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets
   */
  async addSurveyData(data: SurveyData): Promise<boolean> {
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
    if (!data.timestamp) {
      data.timestamp = new Date().toLocaleString('ru-RU');
    }

    // –ï—Å–ª–∏ URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
    if (!this.webAppUrl) {
      console.warn('‚ö†Ô∏è Web App URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      return this.saveToLocalStorage(data);
    }

    try {
      // –ü—Ä–æ—Å—Ç–æ–π POST –∑–∞–ø—Ä–æ—Å
      const response = await fetch(this.webAppUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          action: 'addSurvey',
          data: data
        })
      });

      if (response.ok) {
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã');
        return true;
      } else {
        throw new Error(`HTTP ${response.status}`);
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
      return this.saveToLocalStorage(data);
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω–æ
   */
  private saveToLocalStorage(data: SurveyData): boolean {
    try {
      const queue = JSON.parse(localStorage.getItem('survey_data_queue') || '[]');
      queue.push(data);
      localStorage.setItem('survey_data_queue', JSON.stringify(queue));
      console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ');
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
      return false;
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  async syncLocalData(): Promise<void> {
    if (!this.webAppUrl) return;

    try {
      const queue = JSON.parse(localStorage.getItem('survey_data_queue') || '[]');
      if (queue.length === 0) return;

      for (const data of queue) {
        await this.addSurveyData(data);
      }

      localStorage.removeItem('survey_data_queue');
      console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
    }
  }

  /**
   * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
   */
  getUnsyncedCount(): number {
    try {
      const queue = JSON.parse(localStorage.getItem('survey_data_queue') || '[]');
      return queue.length;
    } catch {
      return 0;
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ URL Web App
   */
  setWebAppUrl(url: string): void {
    this.webAppUrl = url;
    console.log('‚úÖ Web App URL –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
  }
}

export const googleSheetsAPIService = new GoogleSheetsAPIService();
export type { SurveyData }; 