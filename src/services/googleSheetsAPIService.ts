// –ü—Ä–æ—Å—Ç–æ–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π API
// –î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å Google Apps Script Web App

interface SurveyData {
  title: string;
  category: string;
  metric: string;
  description: string;
  imageBase64?: string; // –¢–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∞ –Ω–µ base64
  timestamp?: string;
  authorId?: string;
  authorName?: string;
}

class GoogleSheetsAPIService {
  private spreadsheetId: string = '1PHrQ8ZwjrOc4_9QuvpQltuMpuSUGIlcb96lp6korbTA';
  private sheetName: string = '–õ–∏—Å—Ç1';
  
  // URL –¥–ª—è Google Apps Script Web App
  private webAppUrl: string = '';
  
  // –ü—É–±–ª–∏—á–Ω—ã–π API –∫–ª—é—á Google (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±)
  private googleApiKey: string = 'AIzaSyDbjPRbpsnNy3qfHcLMKlH9UxYW8pMsSwQ'; // –ò–∑ Firebase –∫–æ–Ω—Ñ–∏–≥–∞

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–∞ –≤ Google Sheets —á–µ—Ä–µ–∑ Web App
   */
  async addSurveyData(data: SurveyData): Promise<boolean> {
    console.log('üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –û–¢–ü–†–ê–í–ö–£ –î–ê–ù–ù–´–•');
    console.log('üì± User Agent:', navigator.userAgent);
    console.log('üåê URL Web App:', this.webAppUrl);
    console.log('üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', data);

    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
    if (!data.timestamp) {
      data.timestamp = new Date().toLocaleString('ru-RU');
    }

    // –ï—Å–ª–∏ Web App URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
    if (!this.webAppUrl) {
      console.warn('‚ö†Ô∏è Google Apps Script Web App URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!');
      console.log('üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ Google Sheets API...');
      return await this.addDataViaPublicAPI(data);
    }

    try {
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Web App...');
      
      // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∫–∏
      const success = await this.tryMultipleMethods(data);
      
      if (success) {
        console.log('‚úÖ –î–ê–ù–ù–´–ï –£–°–ü–ï–®–ù–û –û–¢–ü–†–ê–í–õ–ï–ù–´!');
        return true;
      } else {
        throw new Error('–í—Å–µ –º–µ—Ç–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏');
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Google Sheets:', error);
      
      // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
      console.log('üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±...');
      try {
        return await this.addDataViaPublicAPI(data);
      } catch (altError) {
        console.error('‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', altError);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π fallback
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ...');
        return this.saveToLocalStorage(data);
      }
    }
  }

  /**
   * –ü—Ä–æ–±—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–æ–¥–æ–≤ –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  private async tryMultipleMethods(data: SurveyData): Promise<boolean> {
    const methods = [
      () => this.sendWithFetch(data),
      () => this.sendWithXMLHttpRequest(data),
      () => this.sendWithForm(data)
    ];

    for (let i = 0; i < methods.length; i++) {
      try {
        console.log(`üîÑ –ü—Ä–æ–±—É–µ–º –º–µ—Ç–æ–¥ ${i + 1}...`);
        const success = await methods[i]();
        if (success) {
          console.log(`‚úÖ –ú–µ—Ç–æ–¥ ${i + 1} —Å—Ä–∞–±–æ—Ç–∞–ª!`);
          return true;
        }
      } catch (error) {
        console.error(`‚ùå –ú–µ—Ç–æ–¥ ${i + 1} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:`, error);
      }
    }

    return false;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ fetch
   */
  private async sendWithFetch(data: SurveyData): Promise<boolean> {
    const response = await fetch(this.webAppUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        action: 'addSurvey',
        data: data
      })
    });

    console.log('üì° Fetch –æ—Ç–≤–µ—Ç:', response.status, response.statusText);
    return response.status === 200;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ XMLHttpRequest
   */
  private async sendWithXMLHttpRequest(data: SurveyData): Promise<boolean> {
    return new Promise((resolve) => {
      const xhr = new XMLHttpRequest();
      xhr.open('POST', this.webAppUrl, true);
      xhr.setRequestHeader('Content-Type', 'application/json');
      
      xhr.onreadystatechange = function() {
        if (xhr.readyState === 4) {
          console.log('üì° XHR –æ—Ç–≤–µ—Ç:', xhr.status, xhr.statusText);
          resolve(xhr.status === 200);
        }
      };
      
      xhr.send(JSON.stringify({
        action: 'addSurvey',
        data: data
      }));
    });
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ —Å–∫—Ä—ã—Ç—É—é —Ñ–æ—Ä–º—É
   */
  private async sendWithForm(data: SurveyData): Promise<boolean> {
    return new Promise((resolve) => {
      const form = document.createElement('form');
      form.method = 'POST';
      form.action = this.webAppUrl;
      form.style.display = 'none';

      const input = document.createElement('input');
      input.type = 'hidden';
      input.name = 'data';
      input.value = JSON.stringify({
        action: 'addSurvey',
        data: data
      });

      form.appendChild(input);
      document.body.appendChild(form);
      
      form.submit();
      
      // –£–¥–∞–ª—è–µ–º —Ñ–æ—Ä–º—É —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
      setTimeout(() => {
        document.body.removeChild(form);
        resolve(true); // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —É—Å–ø–µ—Ö
      }, 1000);
    });
  }

  /**
   * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π Google Sheets API
   */
  private async addDataViaPublicAPI(data: SurveyData): Promise<boolean> {
    try {
      console.log('üîë –ü—Ä–æ–±—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π API Google Sheets...');
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ API
      const values = [[
        data.timestamp,
        data.title,
        data.category,
        data.metric,
        data.description,
        data.imageBase64 || '',
        data.authorId,
        data.authorName
      ]];

      const url = `https://sheets.googleapis.com/v4/spreadsheets/${this.spreadsheetId}/values/${this.sheetName}!A:H:append?valueInputOption=RAW&key=${this.googleApiKey}`;
      
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          values: values
        })
      });

      console.log('üì° Google API –æ—Ç–≤–µ—Ç:', response.status, response.statusText);
      
      if (response.ok) {
        console.log('‚úÖ –ü—É–±–ª–∏—á–Ω—ã–π API —Å—Ä–∞–±–æ—Ç–∞–ª!');
        return true;
      } else {
        const errorText = await response.text();
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏—á–Ω–æ–≥–æ API:', errorText);
        return false;
      }

    } catch (error) {
      console.error('‚ùå –ü—É–±–ª–∏—á–Ω—ã–π API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', error);
      return false;
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ localStorage –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
   */
  private saveToLocalStorage(data: SurveyData): boolean {
    try {
      const storageKey = 'survey_data_queue';
      const existingData = localStorage.getItem(storageKey);
      const queue = existingData ? JSON.parse(existingData) : [];
      
      queue.push(data);
      localStorage.setItem(storageKey, JSON.stringify(queue));
      
      console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage:', error);
      return false;
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å Google Sheets
   */
  async syncLocalData(): Promise<void> {
    if (!this.webAppUrl) {
      console.warn('‚ö†Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞: Web App URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      return;
    }

    try {
      const storageKey = 'survey_data_queue';
      const existingData = localStorage.getItem(storageKey);
      
      if (!existingData) {
        console.log('‚úÖ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
        return;
      }

      const queue = JSON.parse(existingData);
      console.log(`üì§ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è ${queue.length} –∑–∞–ø–∏—Å–µ–π...`);

      for (const data of queue) {
        await this.addSurveyData(data);
      }

      // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      localStorage.removeItem(storageKey);
      console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
   */
  getUnsyncedCount(): number {
    try {
      const storageKey = 'survey_data_queue';
      const existingData = localStorage.getItem(storageKey);
      
      if (!existingData) return 0;
      
      const queue = JSON.parse(existingData);
      return queue.length;
    } catch {
      return 0;
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç URL –¥–ª—è Web App
   */
  setWebAppUrl(url: string): void {
    this.webAppUrl = url;
    console.log('‚úÖ Web App URL –Ω–∞—Å—Ç—Ä–æ–µ–Ω:', url);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
export const googleSheetsAPIService = new GoogleSheetsAPIService();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø
export type { SurveyData }; 