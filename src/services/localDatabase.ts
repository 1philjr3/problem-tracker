// –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ JSON —Ñ–∞–π–ª—ã
import type { Problem, User, Season, PointsHistory } from '../types';

// –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –¥–∞–Ω–Ω—ã–º–∏ (—Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
const DATA_FOLDER = '/Users/mike/Desktop/quiz/problem-tracker-data';
const UPLOADS_FOLDER = `${DATA_FOLDER}/uploads`;

// –ò—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤
export interface PointsHistory {
  id: string;
  userId: string;
  problemId: string;
  points: number;
  reason: string; // –ü—Ä–∏—á–∏–Ω–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è (–±–∞–∑–æ–≤—ã–µ –±–∞–ª–ª—ã, –±–æ–Ω—É—Å –æ—Ç –∞–¥–º–∏–Ω–∞ –∏ —Ç.–¥.)
  createdAt: string;
  seasonId: string;
  adminId?: string; // ID –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ –±–∞–ª–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤—Ä—É—á–Ω—É—é
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
interface LocalDatabase {
  problems: Problem[];
  users: User[];
  seasons: Season[];
  pointsHistory: PointsHistory[];
  settings: {
    currentSeason: string;
    autoBackup: boolean;
    lastBackup: string;
  };
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Å—Ç–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const EMPTY_DATABASE: LocalDatabase = {
  problems: [],
  users: [],
  seasons: [
    {
      id: 'season-2024',
      name: '–°–µ–∑–æ–Ω 2024',
      startDate: '2024-01-01T00:00:00.000Z',
      endDate: '2024-12-31T23:59:59.000Z',
      isActive: true,
      totalProblems: 0,
      totalParticipants: 0,
      createdAt: new Date().toISOString(),
    }
  ],
  pointsHistory: [],
  settings: {
    currentSeason: 'season-2024',
    autoBackup: true,
    lastBackup: new Date().toISOString(),
  }
};

class LocalDatabaseService {
  private database: LocalDatabase = EMPTY_DATABASE;
  private isInitialized = false;

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤
  async initialize(): Promise<void> {
    try {
      console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
      
      // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
      await this.createDirectories();
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–∞–∑—É –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
      await this.loadDatabase();
      
      this.isInitialized = true;
      console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞!');
      console.log(`üìÅ –î–∞–Ω–Ω—ã–µ: ${DATA_FOLDER}`);
      console.log(`üñºÔ∏è –§–∞–π–ª—ã: ${UPLOADS_FOLDER}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
      // Fallback - —Ä–∞–±–æ—Ç–∞–µ–º –≤ –ø–∞–º—è—Ç–∏
      this.database = EMPTY_DATABASE;
      this.isInitialized = true;
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
  private async createDirectories(): Promise<void> {
    try {
      // –í –±—Ä–∞—É–∑–µ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏
      if (typeof window !== 'undefined') {
        // –ë—Ä–∞—É–∑–µ—Ä–Ω–∞—è –≤–µ—Ä—Å–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage
        return;
      }
      
      // Node.js –≤–µ—Ä—Å–∏—è (–¥–ª—è –±—É–¥—É—â–µ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
      const fs = await import('fs');
      const path = await import('path');
      
      if (!fs.existsSync(DATA_FOLDER)) {
        fs.mkdirSync(DATA_FOLDER, { recursive: true });
      }
      
      if (!fs.existsSync(UPLOADS_FOLDER)) {
        fs.mkdirSync(UPLOADS_FOLDER, { recursive: true });
      }
      
    } catch (error) {
      console.log('üì± –ë—Ä–∞—É–∑–µ—Ä–Ω–∞—è –≤–µ—Ä—Å–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage');
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  private async loadDatabase(): Promise<void> {
    try {
      if (typeof window !== 'undefined') {
        // –ë—Ä–∞—É–∑–µ—Ä–Ω–∞—è –≤–µ—Ä—Å–∏—è
        const stored = localStorage.getItem('problem-tracker-db');
        if (stored) {
          this.database = JSON.parse(stored);
          console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ localStorage');
        } else {
          this.database = EMPTY_DATABASE;
          await this.saveDatabase();
          console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö');
        }
      }
    } catch (error) {
      console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç—É—é:', error);
      this.database = EMPTY_DATABASE;
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  private async saveDatabase(): Promise<void> {
    try {
      if (typeof window !== 'undefined') {
        // –ë—Ä–∞—É–∑–µ—Ä–Ω–∞—è –≤–µ—Ä—Å–∏—è
        localStorage.setItem('problem-tracker-db', JSON.stringify(this.database));
        console.log('üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ localStorage');
        
        // –¢–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–º JSON –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        console.log('üìÑ JSON –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä:');
        console.log(JSON.stringify(this.database, null, 2));
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ
  async saveImage(file: File): Promise<string> {
    try {
      // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
      const timestamp = Date.now();
      const randomId = Math.random().toString(36).substring(2);
      const extension = file.name.split('.').pop() || 'jpg';
      const fileName = `${timestamp}_${randomId}.${extension}`;
      
      if (typeof window !== 'undefined') {
        // –í –±—Ä–∞—É–∑–µ—Ä–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ base64 –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        return new Promise((resolve, reject) => {
          const reader = new FileReader();
          reader.onload = () => {
            const base64 = reader.result as string;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            const images = JSON.parse(localStorage.getItem('problem-tracker-images') || '{}');
            images[fileName] = {
              name: file.name,
              size: file.size,
              type: file.type,
              data: base64,
              savedAt: new Date().toISOString()
            };
            localStorage.setItem('problem-tracker-images', JSON.stringify(images));
            
            console.log(`üíæ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${fileName}`);
            console.log(`üìÅ –ü—É—Ç—å: ${UPLOADS_FOLDER}/${fileName}`);
            
            resolve(fileName);
          };
          reader.onerror = reject;
          reader.readAsDataURL(file);
        });
      }
      
      return fileName;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  async getImage(fileName: string): Promise<string | null> {
    try {
      if (typeof window !== 'undefined') {
        const images = JSON.parse(localStorage.getItem('problem-tracker-images') || '{}');
        return images[fileName]?.data || null;
      }
      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
      return null;
    }
  }

  // CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–±–ª–µ–º
  async addProblem(problem: Omit<Problem, 'id'>): Promise<Problem> {
    const newProblem: Problem = {
      ...problem,
      id: `problem_${Date.now()}_${Math.random().toString(36).substring(2)}`,
    };
    
    this.database.problems.push(newProblem);
    await this.saveDatabase();
    
    console.log('‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:', newProblem.title);
    return newProblem;
  }

  async getProblems(): Promise<Problem[]> {
    return [...this.database.problems];
  }

  async updateProblem(id: string, updates: Partial<Problem>): Promise<Problem | null> {
    const index = this.database.problems.findIndex(p => p.id === id);
    if (index === -1) return null;
    
    this.database.problems[index] = { ...this.database.problems[index], ...updates };
    await this.saveDatabase();
    
    console.log('‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', id);
    return this.database.problems[index];
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–∞)
  async addBonusPoints(problemId: string, points: number, reason: string): Promise<void> {
    const problem = this.database.problems.find(p => p.id === problemId);
    if (!problem) throw new Error('–ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–ª—ã –ø—Ä–æ–±–ª–µ–º—ã
    problem.points += points;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    const historyEntry: PointsHistory = {
      id: `history_${Date.now()}_${Math.random().toString(36).substring(2)}`,
      userId: problem.authorId,
      problemId: problemId,
      points: points,
      reason: reason,
      createdAt: new Date().toISOString(),
      seasonId: this.database.settings.currentSeason,
    };
    
    this.database.pointsHistory.push(historyEntry);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–µ –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = this.database.users.find(u => u.id === problem.authorId);
    if (user) {
      user.totalPoints += points;
      user.level = this.calculateLevel(user.totalPoints);
    }
    
    await this.saveDatabase();
    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${points} –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –∑–∞ –ø—Ä–æ–±–ª–µ–º—É: ${problem.title}`);
  }

  // –†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  private calculateLevel(points: number): 'novice' | 'fighter' | 'master' {
    if (points >= 10) return 'master';
    if (points >= 5) return 'fighter';
    return 'novice';
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
  async getAdminStats() {
    return {
      totalProblems: this.database.problems.length,
      totalUsers: this.database.users.length,
      totalPoints: this.database.pointsHistory.reduce((sum, h) => sum + h.points, 0),
      recentProblems: this.database.problems
        .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())
        .slice(0, 10),
      topUsers: this.database.users
        .sort((a, b) => b.totalPoints - a.totalPoints)
        .slice(0, 10),
    };
  }

  // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
  async exportData(): Promise<string> {
    const exportData = {
      ...this.database,
      exportedAt: new Date().toISOString(),
      version: '1.0',
    };
    
    const jsonString = JSON.stringify(exportData, null, 2);
    
    // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –≤ –±—Ä–∞—É–∑–µ—Ä–µ
    if (typeof window !== 'undefined') {
      const blob = new Blob([jsonString], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `problem-tracker-backup-${new Date().toISOString().split('T')[0]}.json`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    }
    
    console.log('üì¶ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
    return jsonString;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  async getAllData(): Promise<LocalDatabase> {
    return { ...this.database };
  }
}

// –°–∏–Ω–≥–ª—Ç–æ–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä
export const localDB = new LocalDatabaseService();

// –ê–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
if (typeof window !== 'undefined') {
  localDB.initialize();
} 