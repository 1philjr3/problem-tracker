// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
export interface LocalUser {
  id: string;
  email: string;
  fullName: string;
  totalPoints: number;
  totalProblems: number;
  level: 'novice' | 'fighter' | 'master';
  joinedAt: string;
  lastActive: string;
  isAdmin?: boolean;
}

export interface LocalProblem {
  id: string;
  title: string;
  description: string;
  category: string;
  authorId: string;
  authorName: string;
  images: string[]; // –ò–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  points: number;
  status: 'pending' | 'reviewed';
  reviewed: boolean; // –û—Ç–º–µ—á–µ–Ω–∞ –ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω–æ–º
  reviewedAt?: string; // –î–∞—Ç–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
  reviewedBy?: string; // ID –∞–¥–º–∏–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª
  createdAt: string;
  adminNotes?: string;
}

export interface PointsHistory {
  id: string;
  userId: string;
  problemId: string;
  points: number;
  reason: string;
  createdAt: string;
  adminId?: string;
}

export interface SeasonSettings {
  currentSeason: string;
  seasonStartDate: string;
  seasonEndDate: string;
  isActive: boolean;
  lastBackup: string;
}

export interface LocalDatabase {
  users: LocalUser[];
  problems: LocalProblem[];
  pointsHistory: PointsHistory[];
  settings: SeasonSettings;
}

class LocalDataService {
  private readonly DATA_PATH = '/Users/mike/Desktop/quiz/problem-tracker-data';
  private readonly UPLOADS_PATH = `${this.DATA_PATH}/uploads`;
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
  async initialize(): Promise<void> {
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    const initialData: LocalDatabase = {
      users: [],
      problems: [],
      pointsHistory: [],
      settings: {
        currentSeason: 'season-2024',
        seasonStartDate: new Date().toISOString(),
        seasonEndDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(), // +30 –¥–Ω–µ–π
        isActive: true,
        lastBackup: new Date().toISOString(),
      }
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    if (!localStorage.getItem('localDatabase')) {
      localStorage.setItem('localDatabase', JSON.stringify(initialData));
    }

    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    await this.fixUserNames();

    console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞!');
    console.log(`üìÅ –î–∞–Ω–Ω—ã–µ: ${this.DATA_PATH}`);
    console.log(`üñºÔ∏è –§–∞–π–ª—ã: ${this.UPLOADS_PATH}`);
    console.log('üëë –ê–¥–º–∏–Ω: admin@mail.ru (–Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ)');
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  private loadData(): LocalDatabase {
    try {
      const data = localStorage.getItem('localDatabase');
      if (data) {
        return JSON.parse(data);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
    return {
      users: [],
      problems: [],
      pointsHistory: [],
      settings: {
        currentSeason: 'season-2024',
        seasonStartDate: new Date().toISOString(),
        seasonEndDate: new Date().toISOString(),
        isActive: true,
        lastBackup: new Date().toISOString(),
      }
    };
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  private saveData(data: LocalDatabase): void {
    try {
      localStorage.setItem('localDatabase', JSON.stringify(data));
      
      // –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º JSON —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      this.exportToFile(data);
      
      console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  }

  // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
  private exportToFile(data: LocalDatabase): void {
    const jsonString = JSON.stringify(data, null, 2);
    const blob = new Blob([jsonString], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    
    // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    const a = document.createElement('a');
    a.href = url;
    a.download = `problem-tracker-data-${new Date().toISOString().split('T')[0]}.json`;
    a.style.display = 'none';
    document.body.appendChild(a);
    
    console.log(`üìÑ JSON —Ñ–∞–π–ª –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é: ${a.download}`);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–µ —Å–∫–∞—á–∏–≤–∞–µ–º, –Ω–æ –≥–æ—Ç–æ–≤–∏–º —Ñ–∞–π–ª
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  async saveImage(file: File): Promise<string> {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      
      reader.onload = () => {
        try {
          const base64 = reader.result as string;
          const fileName = `${Date.now()}_${Math.random().toString(36).substring(2)}_${file.name}`;
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
          const images = JSON.parse(localStorage.getItem('localImages') || '{}');
          images[fileName] = {
            name: file.name,
            size: file.size,
            type: file.type,
            data: base64,
            savedAt: new Date().toISOString(),
            path: `${this.UPLOADS_PATH}/${fileName}`
          };
          localStorage.setItem('localImages', JSON.stringify(images));
          
          console.log(`üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${fileName}`);
          console.log(`üìÅ –ü—É—Ç—å: ${this.UPLOADS_PATH}/${fileName}`);
          
          resolve(fileName);
        } catch (error) {
          reject(error);
        }
      };
      
      reader.onerror = reject;
      reader.readAsDataURL(file);
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  async getImage(fileName: string): Promise<string | null> {
    try {
      const images = JSON.parse(localStorage.getItem('localImages') || '{}');
      return images[fileName]?.data || null;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
      return null;
    }
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async saveUser(userData: Omit<LocalUser, 'totalPoints' | 'totalProblems' | 'level'>): Promise<LocalUser> {
    const data = this.loadData();
    
    let user = data.users.find(u => u.email === userData.email);
    
    if (user) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–æ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –§–ò–û –µ—Å–ª–∏ –æ–Ω–æ —É–∂–µ –µ—Å—Ç—å)
      if (userData.fullName && userData.fullName !== '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' && !userData.fullName.includes('@')) {
        user.fullName = userData.fullName;
      }
      user.lastActive = new Date().toISOString();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∞
      if (userData.email === 'admin@mail.ru') {
        user.isAdmin = true;
      }
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      user = {
        ...userData,
        totalPoints: 0,
        totalProblems: 0,
        level: 'novice',
        isAdmin: userData.email === 'admin@mail.ru', // –ê–¥–º–∏–Ω –ø–æ email
      };
      data.users.push(user);
    }
    
    this.saveData(data);
    return user;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Firestore –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã
  async getUserDisplayName(userId: string, email: string): Promise<string> {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Firebase/Firestore
      const { getDoc, doc } = await import('firebase/firestore');
      const { db } = await import('../firebase');
      
      const userDoc = await getDoc(doc(db, 'users', userId));
      if (userDoc.exists()) {
        const data = userDoc.data();
        if (data.fullName && data.fullName !== '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å') {
          return data.fullName;
        }
      }
    } catch (error) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Firestore:', error);
    }

    // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∏–∑ Firestore, –∏—â–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
    const data = this.loadData();
    const localUser = data.users.find(u => u.id === userId || u.email === email);
    
    if (localUser && localUser.fullName && localUser.fullName !== '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' && !localUser.fullName.includes('@')) {
      return localUser.fullName;
    }

    // –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —á–∞—Å—Ç—å email –¥–æ @
    return email.split('@')[0];
  }

  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π)
  async fixUserNames(): Promise<void> {
    const data = this.loadData();
    let hasChanges = false;
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏–º–µ–Ω–µ–º "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    data.users.forEach(user => {
      if (user.fullName === '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' && user.email) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∞—Å—Ç—å email –¥–æ @ –∫–∞–∫ –∏–º—è
        const emailName = user.email.split('@')[0];
        user.fullName = emailName;
        hasChanges = true;
        console.log(`üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.email} ‚Üí ${emailName}`);
      }
    });

    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å authorName "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    data.problems.forEach(problem => {
      if (problem.authorName === '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å') {
        const user = data.users.find(u => u.id === problem.authorId);
        if (user && user.fullName !== '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å') {
          problem.authorName = user.fullName;
          hasChanges = true;
          console.log(`üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–º—è –∞–≤—Ç–æ—Ä–∞ –ø—Ä–æ–±–ª–µ–º—ã: ${problem.title} ‚Üí ${user.fullName}`);
        }
      }
    });
    
    if (hasChanges) {
      this.saveData(data);
      console.log('‚úÖ –ò–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã');
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUser(userId: string): Promise<LocalUser | null> {
    const data = this.loadData();
    return data.users.find(u => u.id === userId) || null;
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
  async addProblem(problemData: Omit<LocalProblem, 'id' | 'points' | 'status' | 'reviewed' | 'createdAt'>): Promise<LocalProblem> {
    const data = this.loadData();
    
    const problem: LocalProblem = {
      ...problemData,
      id: `problem_${Date.now()}_${Math.random().toString(36).substring(2)}`,
      points: 1, // –ë–∞–∑–æ–≤—ã–µ –±–∞–ª–ª—ã
      status: 'pending',
      reviewed: false, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–∞
      createdAt: new Date().toISOString(),
    };
    
    data.problems.push(problem);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = data.users.find(u => u.id === problemData.authorId);
    if (user) {
      user.totalProblems += 1;
      user.totalPoints += 1;
      user.level = this.calculateLevel(user.totalPoints);
      user.lastActive = new Date().toISOString();
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –±–∞–ª–ª–æ–≤
    const historyEntry: PointsHistory = {
      id: `history_${Date.now()}_${Math.random().toString(36).substring(2)}`,
      userId: problemData.authorId,
      problemId: problem.id,
      points: 1,
      reason: '–ë–∞–∑–æ–≤—ã–µ –±–∞–ª–ª—ã –∑–∞ –ø—Ä–æ–±–ª–µ–º—É',
      createdAt: new Date().toISOString(),
    };
    data.pointsHistory.push(historyEntry);
    
    this.saveData(data);
    console.log('‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:', problem.title);
    
    return problem;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º
  async getProblems(): Promise<LocalProblem[]> {
    const data = this.loadData();
    return [...data.problems].sort((a, b) => 
      new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
    );
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤
  async addBonusPoints(problemId: string, points: number, reason: string, adminId: string): Promise<void> {
    const data = this.loadData();
    
    const problem = data.problems.find(p => p.id === problemId);
    if (!problem) throw new Error('–ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–ª—ã –ø—Ä–æ–±–ª–µ–º—ã
    problem.points += points;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = data.users.find(u => u.id === problem.authorId);
    if (user) {
      user.totalPoints += points;
      user.level = this.calculateLevel(user.totalPoints);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    const historyEntry: PointsHistory = {
      id: `history_${Date.now()}_${Math.random().toString(36).substring(2)}`,
      userId: problem.authorId,
      problemId: problemId,
      points: points,
      reason: reason,
      createdAt: new Date().toISOString(),
      adminId: adminId,
    };
    data.pointsHistory.push(historyEntry);
    
    this.saveData(data);
    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${points} –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –∑–∞ –ø—Ä–æ–±–ª–µ–º—É: ${problem.title}`);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ (–±–µ–∑ –∞–¥–º–∏–Ω–∞)
  async getLeaderboard(): Promise<LocalUser[]> {
    const data = this.loadData();
    return [...data.users]
      .filter(user => !user.isAdmin) // –ò—Å–∫–ª—é—á–∞–µ–º –∞–¥–º–∏–Ω–∞ –∏–∑ —Ä–µ–π—Ç–∏–Ω–≥–∞
      .sort((a, b) => b.totalPoints - a.totalPoints)
      .map((user, index) => ({ ...user, rank: index + 1 }));
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  async getAllData(): Promise<LocalDatabase> {
    return this.loadData();
  }

  // –†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω—è
  private calculateLevel(points: number): 'novice' | 'fighter' | 'master' {
    if (points >= 10) return 'master';
    if (points >= 5) return 'fighter';
    return 'novice';
  }

  // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
  async exportData(): Promise<void> {
    const data = this.loadData();
    const exportData = {
      ...data,
      exportedAt: new Date().toISOString(),
      version: '1.0',
    };
    
    const jsonString = JSON.stringify(exportData, null, 2);
    const blob = new Blob([jsonString], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    
    const a = document.createElement('a');
    a.href = url;
    a.download = `problem-tracker-export-${new Date().toISOString().split('T')[0]}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    console.log('üì¶ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–∞–π–ª');
  }

  // –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
  async importData(file: File): Promise<void> {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      
      reader.onload = () => {
        try {
          const importedData = JSON.parse(reader.result as string);
          
          // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
          if (!importedData.users || !importedData.problems) {
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞');
          }
          
          localStorage.setItem('localDatabase', JSON.stringify(importedData));
          console.log('üì• –î–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞');
          resolve();
        } catch (error) {
          reject(error);
        }
      };
      
      reader.onerror = reject;
      reader.readAsText(file);
    });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
  async isAdmin(userId: string, email: string): Promise<boolean> {
    // –¢–æ–ª—å–∫–æ admin@mail.ru —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞: userId=${userId}, email=${email}`);
    return email === 'admin@mail.ru';
  }

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–æ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
  async updateSeasonSettings(newSettings: Partial<SeasonSettings>, adminId: string, adminEmail: string): Promise<void> {
    const isAdminUser = await this.isAdmin(adminId, adminEmail);
    console.log(`üîç updateSeasonSettings: adminId=${adminId}, adminEmail=${adminEmail}, isAdmin=${isAdminUser}`);
    if (!isAdminUser) {
      throw new Error('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–µ–∑–æ–Ω–æ–º');
    }

    const data = this.loadData();
    data.settings = { ...data.settings, ...newSettings };
    this.saveData(data);
    console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ–∑–æ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–æ–º');
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ–∑–æ–Ω–∞
  async getSeasonSettings(): Promise<SeasonSettings> {
    const data = this.loadData();
    return data.settings;
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
  async deleteUser(userId: string, adminId: string, adminEmail: string): Promise<void> {
    const isAdminUser = await this.isAdmin(adminId, adminEmail);
    console.log(`üîç deleteUser: adminId=${adminId}, adminEmail=${adminEmail}, isAdmin=${isAdminUser}`);
    if (!isAdminUser) {
      throw new Error('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }

    const data = this.loadData();
    
    // –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
    if (userId === adminId) {
      throw new Error('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç');
    }

    // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data.users = data.users.filter(u => u.id !== userId);
    
    // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data.problems = data.problems.filter(p => p.authorId !== userId);
    
    // –£–¥–∞–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –±–∞–ª–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data.pointsHistory = data.pointsHistory.filter(h => h.userId !== userId);
    
    this.saveData(data);
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω–æ–º');
  }

  // –°–±—Ä–æ—Å —Å–µ–∑–æ–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
  async resetSeason(adminId: string, adminEmail: string): Promise<void> {
    const isAdminUser = await this.isAdmin(adminId, adminEmail);
    console.log(`üîç resetSeason: adminId=${adminId}, adminEmail=${adminEmail}, isAdmin=${isAdminUser}`);
    if (!isAdminUser) {
      throw new Error('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å —Å–µ–∑–æ–Ω');
    }

    const data = this.loadData();
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±–∞–ª–ª—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    data.users.forEach(user => {
      user.totalPoints = 0;
      user.totalProblems = 0;
      user.level = 'novice';
    });
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã –∏ –∏—Å—Ç–æ—Ä–∏—é
    data.problems = [];
    data.pointsHistory = [];
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ–∑–æ–Ω–∞
    data.settings.currentSeason = `season-${new Date().getFullYear()}-${Date.now()}`;
    data.settings.seasonStartDate = new Date().toISOString();
    data.settings.lastBackup = new Date().toISOString();
    
    this.saveData(data);
    console.log('‚úÖ –°–µ–∑–æ–Ω —Å–±—Ä–æ—à–µ–Ω –∞–¥–º–∏–Ω–æ–º');
  }

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–∞ —Å –æ—Ç—á–µ—Ç–æ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
  async finishSeason(adminId: string, adminEmail: string): Promise<{ winners: LocalUser[], report: any }> {
    const isAdminUser = await this.isAdmin(adminId, adminEmail);
    console.log(`üîç finishSeason: adminId=${adminId}, adminEmail=${adminEmail}, isAdmin=${isAdminUser}`);
    if (!isAdminUser) {
      throw new Error('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∞—Ç—å —Å–µ–∑–æ–Ω');
    }

    const data = this.loadData();
    
    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
    const winners = [...data.users]
      .sort((a, b) => b.totalPoints - a.totalPoints)
      .slice(0, 10); // –¢–æ–ø-10

    // –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
    const report = {
      seasonName: data.settings.currentSeason,
      startDate: data.settings.seasonStartDate,
      endDate: new Date().toISOString(),
      totalParticipants: data.users.length,
      totalProblems: data.problems.length,
      totalPoints: data.users.reduce((sum, user) => sum + user.totalPoints, 0),
      winners: winners.map((user, index) => ({
        rank: index + 1,
        name: user.fullName,
        points: user.totalPoints,
        problems: user.totalProblems,
        level: user.level
      })),
      finishedAt: new Date().toISOString()
    };

    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ–∑–æ–Ω–∞
    data.settings.isActive = false;
    data.settings.seasonEndDate = new Date().toISOString();
    
    this.saveData(data);
    console.log('üèÜ –°–µ–∑–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω –∞–¥–º–∏–Ω–æ–º');
    
    return { winners, report };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–º —Å–µ–∑–æ–Ω–µ
  async getSeasonReport(): Promise<any | null> {
    const data = this.loadData();
    
    // –ï—Å–ª–∏ —Å–µ–∑–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    if (!data.settings.isActive || new Date() > new Date(data.settings.seasonEndDate)) {
      const winners = [...data.users]
        .sort((a, b) => b.totalPoints - a.totalPoints)
        .slice(0, 10);

      return {
        seasonName: data.settings.currentSeason,
        startDate: data.settings.seasonStartDate,
        endDate: data.settings.seasonEndDate,
        totalParticipants: data.users.length,
        totalProblems: data.problems.length,
        totalPoints: data.users.reduce((sum, user) => sum + user.totalPoints, 0),
        winners: winners.map((user, index) => ({
          rank: index + 1,
          name: user.fullName,
          points: user.totalPoints,
          problems: user.totalProblems,
          level: user.level
        })),
        isActive: data.settings.isActive
      };
    }
    
    return null;
  }

  // –û—Ç–º–µ—Ç–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
  async markProblemAsReviewed(problemId: string, adminId: string, adminEmail: string): Promise<void> {
    const isAdminUser = await this.isAdmin(adminId, adminEmail);
    console.log(`üîç markProblemAsReviewed: adminId=${adminId}, adminEmail=${adminEmail}, isAdmin=${isAdminUser}`);
    if (!isAdminUser) {
      throw new Error('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–º–µ—á–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ');
    }

    const data = this.loadData();
    const problem = data.problems.find(p => p.id === problemId);
    
    if (!problem) {
      throw new Error('–ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    problem.reviewed = !problem.reviewed;
    problem.reviewedAt = problem.reviewed ? new Date().toISOString() : undefined;
    problem.reviewedBy = problem.reviewed ? adminId : undefined;
    
    this.saveData(data);
    console.log(`‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ ${problem.reviewed ? '–æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–∞—è' : '—Å–Ω—è—Ç–∞ —Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞'}: ${problem.title}`);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const localDataService = new LocalDataService();

// –ê–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
if (typeof window !== 'undefined') {
  localDataService.initialize();
} 