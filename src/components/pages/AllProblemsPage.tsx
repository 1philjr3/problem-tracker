import React, { useState, useEffect } from 'react';
import { dataService } from '../../services/dataService';
import { useAuth } from '../../contexts/AuthContext';
import { getCategoryInfo } from '../../types/index';
import type { Problem, User } from '../../types/index';

const AllProblemsPage: React.FC = () => {
  const { currentUser } = useAuth();
  const [problems, setProblems] = useState<Problem[]>([]);
  const [users, setUsers] = useState<Record<string, User>>({});
  const [loading, setLoading] = useState(true);
  const [selectedCategory, setSelectedCategory] = useState<string>('all');
  const [selectedUser, setSelectedUser] = useState<string>('all');
  const [selectedStatus, setSelectedStatus] = useState<string>('all');
  const [isAdmin, setIsAdmin] = useState(false);
  const [selectedProblem, setSelectedProblem] = useState<Problem | null>(null);
  const [bonusPoints, setBonusPoints] = useState<number>(1);

  useEffect(() => {
    checkAdminStatus();
    loadData();
  }, [currentUser]);

  const checkAdminStatus = async () => {
    if (!currentUser) return;
    
    const adminStatus = await dataService.isAdmin(currentUser.uid, currentUser.email || '');
    setIsAdmin(adminStatus);
  };

  const loadData = async () => {
    try {
      setLoading(true);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const [problemsData, allData] = await Promise.all([
        dataService.getProblems(),
        dataService.getAllData()
      ]);
      
      setProblems(problemsData);
      
      // –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
      const usersMap: Record<string, User> = {};
      allData.users.forEach((user: User) => {
        usersMap[user.id] = user;
      });
      setUsers(usersMap);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    } finally {
      setLoading(false);
    }
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–±–ª–µ–º
  const filteredProblems = problems.filter(problem => {
    if (selectedCategory !== 'all' && problem.category !== selectedCategory) return false;
    if (selectedUser !== 'all' && problem.authorId !== selectedUser) return false;
    if (selectedStatus === 'reviewed' && !problem.reviewed) return false;
    if (selectedStatus === 'unreviewed' && problem.reviewed) return false;
    return true;
  });

  // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
  const uniqueUsers = Array.from(new Set(problems.map(p => p.authorId)))
    .map(userId => ({
      id: userId,
      name: users[userId]?.fullName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    }))
    .sort((a, b) => a.name.localeCompare(b.name));

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const stats = {
    total: problems.length,
    reviewed: problems.filter(p => p.reviewed).length,
    unreviewed: problems.filter(p => !p.reviewed).length,
    totalPoints: problems.reduce((sum, p) => sum + (p.points || 1), 0)
  };

  const handleAddBonusPoints = async (problemId: string, points: number) => {
    if (!currentUser || !isAdmin) return;
    
    try {
      await dataService.addBonusPoints(
        problemId,
        points,
        currentUser.uid,
        currentUser.email || ''
      );
      
      await loadData();
      setSelectedProblem(null);
      setBonusPoints(1);
      
      alert(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${points} –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤!`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤');
    }
  };

  const handleToggleReviewed = async (problemId: string) => {
    if (!currentUser || !isAdmin) return;
    
    try {
      await dataService.markProblemAsReviewed(problemId, currentUser.uid, currentUser.email || '');
      await loadData();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
    }
  };

  const formatDate = (date: string | Date) => {
    const d = typeof date === 'string' ? new Date(date) : date;
    return d.toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto p-4 space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="text-center">
        <h1 className="text-3xl font-bold text-gray-900 mb-2">
          üìã –í—Å–µ –ø—Ä–æ–±–ª–µ–º—ã
        </h1>
        <p className="text-gray-600">
          –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –æ—Ç –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        </p>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4 text-center">
          <div className="text-2xl font-bold text-blue-600">{stats.total}</div>
          <div className="text-sm text-gray-600">–í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º</div>
        </div>
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4 text-center">
          <div className="text-2xl font-bold text-green-600">{stats.reviewed}</div>
          <div className="text-sm text-gray-600">–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ</div>
        </div>
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4 text-center">
          <div className="text-2xl font-bold text-orange-600">{stats.unreviewed}</div>
          <div className="text-sm text-gray-600">–ù–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ</div>
        </div>
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4 text-center">
          <div className="text-2xl font-bold text-purple-600">{stats.totalPoints}</div>
          <div className="text-sm text-gray-600">–í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤</div>
        </div>
      </div>

      {/* –§–∏–ª—å—Ç—Ä—ã */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
        <h3 className="font-semibold text-gray-900 mb-3">üîç –§–∏–ª—å—Ç—Ä—ã</h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              –ö–∞—Ç–µ–≥–æ—Ä–∏—è
            </label>
            <select
              value={selectedCategory}
              onChange={(e) => setSelectedCategory(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
            >
              <option value="all">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
              <option value="maintenance">üîß –¢–û</option>
              <option value="testing">üß™ –ò—Å–ø—ã—Ç–∞–Ω–∏—è</option>
              <option value="audit">üìã –ê—É–¥–∏—Ç</option>
              <option value="pnr">üè≠ –ü–ù–†</option>
              <option value="safety">‚ö†Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</option>
              <option value="quality">‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ</option>
              <option value="equipment">‚öôÔ∏è –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ</option>
              <option value="process">üîÑ –ü—Ä–æ—Ü–µ—Å—Å—ã</option>
              <option value="other">üìù –î—Ä—É–≥–æ–µ</option>
            </select>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              –£—á–∞—Å—Ç–Ω–∏–∫
            </label>
            <select
              value={selectedUser}
              onChange={(e) => setSelectedUser(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
            >
              <option value="all">–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏</option>
              {uniqueUsers.map(user => (
                <option key={user.id} value={user.id}>
                  {user.name}
                </option>
              ))}
            </select>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              –°—Ç–∞—Ç—É—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            </label>
            <select
              value={selectedStatus}
              onChange={(e) => setSelectedStatus(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
            >
              <option value="all">–í—Å–µ</option>
              <option value="reviewed">‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ</option>
              <option value="unreviewed">‚è≥ –ù–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ</option>
            </select>
          </div>
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º */}
      <div className="space-y-4">
        {filteredProblems.length === 0 ? (
          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-8 text-center">
            <div className="text-6xl mb-4">üîç</div>
            <h3 className="text-xl font-semibold text-gray-900 mb-2">
              –ü—Ä–æ–±–ª–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            </h3>
            <p className="text-gray-600">
              –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –Ω–æ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º
            </p>
          </div>
        ) : (
          filteredProblems.map(problem => {
            const author = users[problem.authorId];
            const categoryInfo = getCategoryInfo(problem.category);
            
            return (
              <div
                key={problem.id}
                className={`bg-white rounded-lg shadow-sm border ${
                  problem.reviewed ? 'border-green-200' : 'border-gray-200'
                } p-4 md:p-6`}
              >
                <div className="flex flex-col md:flex-row md:items-start md:justify-between gap-4">
                  <div className="flex-1 space-y-3">
                    {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è */}
                    <div className="flex items-start gap-3">
                      <span className="text-2xl">{categoryInfo.emoji}</span>
                      <div className="flex-1">
                        <h3 className="text-lg font-semibold text-gray-900">
                          {problem.title}
                        </h3>
                        <div className="flex flex-wrap items-center gap-2 mt-1 text-sm">
                          <span className="px-2 py-1 rounded-full text-xs font-medium"
                            style={{
                              backgroundColor: `${categoryInfo.color}20`,
                              color: categoryInfo.color
                            }}
                          >
                            {categoryInfo.name}
                          </span>
                          <span className="text-gray-500">‚Ä¢</span>
                          <span className="text-gray-600">
                            {author?.fullName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
                          </span>
                          <span className="text-gray-500">‚Ä¢</span>
                          <span className="text-gray-500">
                            {formatDate(problem.createdAt)}
                          </span>
                        </div>
                      </div>
                    </div>

                    {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
                    <p className="text-gray-700 whitespace-pre-wrap">
                      {problem.description}
                    </p>

                    {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
                    {problem.images && problem.images.length > 0 && (
                      <div className="flex flex-wrap gap-2 mt-3">
                        {problem.images.map((image, index) => (
                          <div key={index} className="relative group">
                            <img
                              src={image}
                              alt={`–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${index + 1}`}
                              className="h-20 w-20 object-cover rounded-lg border border-gray-200 cursor-pointer hover:opacity-75"
                              onClick={() => window.open(image, '_blank')}
                            />
                          </div>
                        ))}
                      </div>
                    )}

                    {/* –°—Ç–∞—Ç—É—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ */}
                    {problem.reviewed && (
                      <div className="flex items-center gap-2 text-sm text-green-600">
                        <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                          <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                        </svg>
                        <span>–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ –∞–¥–º–∏–Ω–æ–º</span>
                        {problem.reviewedAt && (
                          <span className="text-gray-500">
                            ({formatDate(problem.reviewedAt)})
                          </span>
                        )}
                      </div>
                    )}
                  </div>

                  {/* –ë–∞–ª–ª—ã –∏ –¥–µ–π—Å—Ç–≤–∏—è */}
                  <div className="flex flex-col items-end gap-3">
                    <div className="text-center">
                      <div className="text-3xl font-bold text-blue-600">
                        {problem.points || 1}
                      </div>
                      <div className="text-sm text-gray-600">
                        {problem.points === 1 ? '–±–∞–ª–ª' : problem.points && problem.points < 5 ? '–±–∞–ª–ª–∞' : '–±–∞–ª–ª–æ–≤'}
                      </div>
                    </div>

                    {/* –ê–¥–º–∏–Ω—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è */}
                    {isAdmin && currentUser?.email === 'admin@mail.ru' && (
                      <div className="flex flex-col gap-2">
                        <button
                          onClick={() => setSelectedProblem(problem)}
                          className="bg-blue-600 hover:bg-blue-700 text-white text-sm px-3 py-1 rounded-lg"
                        >
                          ‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–∞–ª–ª—ã
                        </button>
                        <button
                          onClick={() => handleToggleReviewed(problem.id)}
                          className={`text-sm px-3 py-1 rounded-lg ${
                            problem.reviewed
                              ? 'bg-gray-600 hover:bg-gray-700 text-white'
                              : 'bg-green-600 hover:bg-green-700 text-white'
                          }`}
                        >
                          {problem.reviewed ? 'üëÅÔ∏è –°–Ω—è—Ç—å –æ—Ç–º–µ—Ç–∫—É' : '‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–º'}
                        </button>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            );
          })
        )}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ */}
      {selectedProblem && isAdmin && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg p-6 max-w-md w-full">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">
              –î–æ–±–∞–≤–∏—Ç—å –±–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã
            </h3>
            <p className="text-sm text-gray-600 mb-4">
              –ü—Ä–æ–±–ª–µ–º–∞: "{selectedProblem.title}"
            </p>
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤ (1-10)
              </label>
              <input
                type="number"
                min="1"
                max="10"
                value={bonusPoints}
                onChange={(e) => setBonusPoints(Math.min(10, Math.max(1, parseInt(e.target.value) || 1)))}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
              />
            </div>
            <div className="flex gap-3">
              <button
                onClick={() => handleAddBonusPoints(selectedProblem.id, bonusPoints)}
                className="flex-1 bg-green-600 hover:bg-green-700 text-white py-2 rounded-lg"
              >
                ‚úÖ –î–æ–±–∞–≤–∏—Ç—å
              </button>
              <button
                onClick={() => {
                  setSelectedProblem(null);
                  setBonusPoints(1);
                }}
                className="flex-1 bg-gray-600 hover:bg-gray-700 text-white py-2 rounded-lg"
              >
                ‚ùå –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </div>
        </div>
      )}

      {/* –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ */}
      <div className="flex justify-center mt-8">
        <button
          onClick={() => dataService.exportData()}
          className="bg-gray-600 hover:bg-gray-700 text-white px-6 py-2 rounded-lg"
        >
          üì• –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        </button>
      </div>
    </div>
  );
};

export default AllProblemsPage; 