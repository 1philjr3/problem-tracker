import React, { useState, useEffect } from 'react';
import { localDataService, type SeasonSettings } from '../../services/localDataService';

const SeasonTimer: React.FC = () => {
  const [timeLeft, setTimeLeft] = useState({
    days: 0,
    hours: 0,
    minutes: 0,
    seconds: 0
  });
  const [seasonSettings, setSeasonSettings] = useState<SeasonSettings | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    loadSeasonSettings();
  }, []);

  useEffect(() => {
    if (seasonSettings) {
      const timer = setInterval(() => {
        updateTimer();
      }, 1000);

      return () => clearInterval(timer);
    }
  }, [seasonSettings]);

  const loadSeasonSettings = async () => {
    try {
      const settings = await localDataService.getSeasonSettings();
      setSeasonSettings(settings);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ–∑–æ–Ω–∞:', error);
    } finally {
      setLoading(false);
    }
  };

  const updateTimer = () => {
    if (!seasonSettings) return;

    const now = new Date().getTime();
    const endDate = new Date(seasonSettings.seasonEndDate).getTime();
    const difference = endDate - now;

    if (difference > 0) {
      setTimeLeft({
        days: Math.floor(difference / (1000 * 60 * 60 * 24)),
        hours: Math.floor((difference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),
        minutes: Math.floor((difference % (1000 * 60 * 60)) / (1000 * 60)),
        seconds: Math.floor((difference % (1000 * 60)) / 1000)
      });
    } else {
      setTimeLeft({ days: 0, hours: 0, minutes: 0, seconds: 0 });
    }
  };

  if (loading) {
    return (
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4 sm:p-6">
        <div className="text-center">
          <div className="animate-pulse">
            <div className="h-6 bg-gray-300 rounded w-48 mx-auto mb-2"></div>
            <div className="h-4 bg-gray-300 rounded w-32 mx-auto"></div>
          </div>
        </div>
      </div>
    );
  }

  if (!seasonSettings) {
    return (
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4 sm:p-6">
        <div className="text-center">
          <h3 className="text-lg font-semibold text-gray-900 mb-2">
            ‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ–∑–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
          </h3>
          <p className="text-gray-600">
            –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ–∑–æ–Ω–∞
          </p>
        </div>
      </div>
    );
  }

  const isActive = seasonSettings.isActive;
  const hasEnded = new Date() > new Date(seasonSettings.seasonEndDate);

  return (
    <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4 sm:p-6">
      <div className="text-center">
        <h3 className="text-lg sm:text-xl font-semibold text-gray-900 mb-2">
          ‚è∞ {seasonSettings.currentSeason}
        </h3>
        
        {!isActive ? (
          <div className="text-yellow-600">
            <div className="text-4xl mb-2">‚è∏Ô∏è</div>
            <p className="font-medium">–°–µ–∑–æ–Ω –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</p>
            <p className="text-sm text-gray-600 mt-1">
              –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Å–µ–∑–æ–Ω –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è
            </p>
          </div>
        ) : hasEnded ? (
          <div className="text-red-600">
            <div className="text-4xl mb-2">üèÅ</div>
            <p className="font-medium">–°–µ–∑–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω!</p>
            <p className="text-sm text-gray-600 mt-1">
              –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ–∑–æ–Ω–∞ –±—É–¥—É—Ç –ø–æ–¥–≤–µ–¥–µ–Ω—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.<br />
              –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!
            </p>
          </div>
        ) : (
          <div className="text-blue-600">
            <div className="text-4xl mb-2">‚è≥</div>
            <p className="font-medium mb-4">–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–µ–∑–æ–Ω–∞:</p>
            
            <div className="grid grid-cols-4 gap-2 sm:gap-4 mb-4">
              <div className="bg-blue-50 rounded-lg p-2 sm:p-3">
                <div className="text-xl sm:text-2xl font-bold text-blue-600">
                  {timeLeft.days}
                </div>
                <div className="text-xs sm:text-sm text-blue-500">
                  –¥–Ω–µ–π
                </div>
              </div>
              
              <div className="bg-blue-50 rounded-lg p-2 sm:p-3">
                <div className="text-xl sm:text-2xl font-bold text-blue-600">
                  {timeLeft.hours}
                </div>
                <div className="text-xs sm:text-sm text-blue-500">
                  —á–∞—Å–æ–≤
                </div>
              </div>
              
              <div className="bg-blue-50 rounded-lg p-2 sm:p-3">
                <div className="text-xl sm:text-2xl font-bold text-blue-600">
                  {timeLeft.minutes}
                </div>
                <div className="text-xs sm:text-sm text-blue-500">
                  –º–∏–Ω—É—Ç
                </div>
              </div>
              
              <div className="bg-blue-50 rounded-lg p-2 sm:p-3">
                <div className="text-xl sm:text-2xl font-bold text-blue-600">
                  {timeLeft.seconds}
                </div>
                <div className="text-xs sm:text-sm text-blue-500">
                  —Å–µ–∫—É–Ω–¥
                </div>
              </div>
            </div>
            
            <p className="text-sm text-gray-600">
              –ù–∞—á–∞–ª–æ: {new Date(seasonSettings.seasonStartDate).toLocaleDateString('ru-RU')}<br />
              –û–∫–æ–Ω—á–∞–Ω–∏–µ: {new Date(seasonSettings.seasonEndDate).toLocaleDateString('ru-RU')}
            </p>
          </div>
        )}
      </div>
    </div>
  );
};

export { SeasonTimer }; 