import React, { useState, useEffect } from 'react';
import { useAuth } from '../../contexts/AuthContext';
import { localDataService, type LocalUser } from '../../services/localDataService';

const Header: React.FC = () => {
  const { currentUser, logout } = useAuth();
  const [userStats, setUserStats] = useState<LocalUser | null>(null);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (currentUser) {
      loadUserStats();
    }
  }, [currentUser]);

  useEffect(() => {
    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const handleStatsUpdate = () => {
      loadUserStats();
    };

    window.addEventListener('userStatsUpdated', handleStatsUpdate);
    
    return () => {
      window.removeEventListener('userStatsUpdated', handleStatsUpdate);
    };
  }, [currentUser]);

  const loadUserStats = async () => {
    if (!currentUser) return;

    try {
      setLoading(true);

      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const displayName = await localDataService.getUserDisplayName(
        currentUser.uid, 
        currentUser.email || ''
      );

      // –¢–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–µ –∞–¥–º–∏–Ω–æ–≤) —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É
      if (currentUser.email !== 'admin@mail.ru') {
        await localDataService.saveUser({
          id: currentUser.uid,
          email: currentUser.email || '',
          fullName: displayName,
          joinedAt: new Date().toISOString(),
          lastActive: new Date().toISOString(),
        });

        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userData = await localDataService.getUser(currentUser.uid);
        if (userData) {
          setUserStats(userData);
        }
      } else {
        // –î–ª—è –∞–¥–º–∏–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        setUserStats({
          id: currentUser.uid,
          email: currentUser.email,
          fullName: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
          totalPoints: 0,
          totalProblems: 0,
          level: 'master',
          joinedAt: new Date().toISOString(),
          lastActive: new Date().toISOString(),
          isAdmin: true
        });
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ Header:', error);
    } finally {
      setLoading(false);
    }
  };

  const getLevelInfo = (level: string) => {
    const levels: Record<string, { name: string; emoji: string; color: string }> = {
      novice: { name: '–ù–æ–≤–∏—á–æ–∫', emoji: 'üèÅ', color: 'text-green-600' },
      fighter: { name: '–ë–æ–µ—Ü', emoji: 'üõ†Ô∏è', color: 'text-blue-600' },
      master: { name: '–ú–∞—Å—Ç–µ—Ä', emoji: 'üß†', color: 'text-purple-600' },
    };
    return levels[level] || levels.novice;
  };

  const handleLogout = async () => {
    try {
      await logout();
    } catch (error) {
      console.error('Error logging out:', error);
    }
  };

  return (
    <header className="bg-white shadow-sm border-b">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between items-center py-4">
          {/* –õ–æ–≥–æ—Ç–∏–ø */}
          <div className="flex items-center space-x-3">
            <div className="text-3xl">üè≠</div>
            <div>
              <h1 className="text-xl font-bold text-gray-900">–°–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–æ–≤ –ü–ù–†</h1>
              <p className="text-sm text-gray-500">–ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤</p>
            </div>
          </div>

          {/* –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
          {currentUser && (
            <div className="flex items-center space-x-4">
              {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ */}
              <div className="text-right">
                {loading ? (
                  <div className="flex items-center space-x-2">
                    <div className="animate-pulse">
                      <div className="h-4 bg-gray-300 rounded w-20 mb-1"></div>
                      <div className="h-3 bg-gray-300 rounded w-32"></div>
                    </div>
                  </div>
                ) : userStats ? (
                  <>
                    <div className="flex items-center space-x-2">
                      <span className="font-medium text-gray-900">{userStats.fullName}</span>
                      <span className="text-2xl">{getLevelInfo(userStats.level).emoji}</span>
                    </div>
                    <div className="flex items-center space-x-4 text-sm text-gray-500">
                      <span className={`px-2 py-1 rounded-full text-xs font-medium bg-gray-100 ${getLevelInfo(userStats.level).color}`}>
                        {getLevelInfo(userStats.level).name}
                      </span>
                      <span>üíé {userStats.totalPoints} –±–∞–ª–ª–æ–≤</span>
                      <span>üìù {userStats.totalProblems} –æ—Ç–≤–µ—Ç–æ–≤</span>
                    </div>
                  </>
                ) : (
                  <>
                    <div className="flex items-center space-x-2">
                      <span className="font-medium text-gray-900">
                        {currentUser.displayName || currentUser.email || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
                      </span>
                      <span className="text-2xl">üèÅ</span>
                    </div>
                    <div className="flex items-center space-x-4 text-sm text-gray-500">
                      <span className="px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-green-600">
                        –ù–æ–≤–∏—á–æ–∫
                      </span>
                      <span>üíé 0 –±–∞–ª–ª–æ–≤</span>
                      <span>üìù 0 –æ—Ç–≤–µ—Ç–æ–≤</span>
                    </div>
                  </>
                )}
              </div>

              {/* –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */}
              <button
                onClick={loadUserStats}
                disabled={loading}
                className="text-gray-500 hover:text-gray-700 p-2 rounded-lg hover:bg-gray-100 transition-colors disabled:opacity-50"
                title="–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
              >
                <svg className={`w-4 h-4 ${loading ? 'animate-spin' : ''}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                </svg>
              </button>

              {/* –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ */}
              <button
                onClick={handleLogout}
                className="text-gray-500 hover:text-gray-700 p-2 rounded-lg hover:bg-gray-100 transition-colors"
                title="–í—ã–π—Ç–∏"
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013 3v1" />
                </svg>
              </button>
            </div>
          )}
        </div>
      </div>
    </header>
  );
};

export default Header; 