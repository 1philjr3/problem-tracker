import React, { useState, useEffect } from 'react';
import { cloudDataService, type LocalUser } from '../../services/cloudDataService';
import { useAuth } from '../../contexts/AuthContext';

const Header: React.FC = () => {
  const { currentUser, logout } = useAuth();
  const [userStats, setUserStats] = useState<LocalUser | null>(null);
  const [loading, setLoading] = useState(true);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const loadUserStats = async () => {
    if (!currentUser) {
      setUserStats(null);
      setLoading(false);
      return;
    }

    try {
      setLoading(true);

      // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const displayName = await cloudDataService.getUserDisplayName(
        currentUser.uid, 
        currentUser.email || ''
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await cloudDataService.saveUser({
        id: currentUser.uid,
        email: currentUser.email || '',
        fullName: displayName,
        joinedAt: new Date().toISOString(),
        lastActive: new Date().toISOString(),
      });

      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userData = await cloudDataService.getUser(currentUser.uid);
      setUserStats(userData);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    } finally {
      setLoading(false);
    }
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    loadUserStats();
  }, [currentUser]);

  // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  useEffect(() => {
    const handleStatsUpdate = () => {
      loadUserStats();
    };

    window.addEventListener('userStatsUpdated', handleStatsUpdate);
    return () => {
      window.removeEventListener('userStatsUpdated', handleStatsUpdate);
    };
  }, []);

  const getLevelInfo = (level: string) => {
    switch (level) {
      case 'novice':
        return { emoji: 'üèÅ', name: '–ù–æ–≤–∏—á–æ–∫', range: '1-4 –±–∞–ª–ª–∞' };
      case 'fighter':
        return { emoji: 'üõ†Ô∏è', name: '–ë–æ–µ—Ü', range: '5-9 –±–∞–ª–ª–æ–≤' };
      case 'master':
        return { emoji: 'üß†', name: '–ú–∞—Å—Ç–µ—Ä', range: '10+ –±–∞–ª–ª–æ–≤' };
      default:
        return { emoji: 'üèÅ', name: '–ù–æ–≤–∏—á–æ–∫', range: '1-4 –±–∞–ª–ª–∞' };
    }
  };

  const handleLogout = async () => {
    try {
      await logout();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
    }
  };

  if (!currentUser) {
    return null;
  }

  return (
    <header className="bg-white shadow-sm border-b">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between items-center h-16">
          {/* –õ–æ–≥–æ—Ç–∏–ø –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ */}
          <div className="flex items-center">
            <h1 className="text-xl font-bold text-gray-900">
              üèÜ Problem Tracker
            </h1>
          </div>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ */}
          <div className="flex items-center space-x-4">
            {loading ? (
              <div className="animate-pulse">
                <div className="h-4 bg-gray-200 rounded w-24"></div>
              </div>
            ) : userStats ? (
              <div className="flex items-center space-x-3">
                {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
                <div className="text-right">
                  <div className="text-sm font-medium text-gray-900">
                    {userStats.fullName}
                  </div>
                  <div className="text-xs text-gray-500">
                    {getLevelInfo(userStats.level).emoji} {getLevelInfo(userStats.level).name} ‚Ä¢ {userStats.totalPoints} –±–∞–ª–ª–æ–≤
                  </div>
                </div>

                {/* –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */}
                <button
                  onClick={loadUserStats}
                  className="p-1 text-gray-400 hover:text-gray-600 transition-colors"
                  title="–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
                >
                  üîÑ
                </button>
              </div>
            ) : (
              <div className="text-sm text-gray-500">
                {currentUser.email}
              </div>
            )}

            {/* –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ */}
            <button
              onClick={handleLogout}
              className="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-gray-500 bg-white hover:text-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              –í—ã–π—Ç–∏
            </button>
          </div>
        </div>
      </div>
    </header>
  );
};

export default Header; 