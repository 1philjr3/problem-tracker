/**
 * Google Apps Script –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets –∫–∞–∫ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
 * 
 * –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ:
 * 1. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à—É Google —Ç–∞–±–ª–∏—Ü—É
 * 2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –†–∞—Å—à–∏—Ä–µ–Ω–∏—è -> Apps Script
 * 3. –£–¥–∞–ª–∏—Ç–µ –≤–µ—Å—å –∫–æ–¥ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ—Ç
 * 4. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç (Ctrl+S)
 * 5. –ù–∞–∂–º–∏—Ç–µ "–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å" -> "–ù–æ–≤–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ"
 * 6. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø: "–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
 * 7. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ:
 *    - –û–ø–∏—Å–∞–Ω–∏–µ: "Survey Data API"
 *    - –ó–∞–ø—É—Å–∫ –æ—Ç –∏–º–µ–Ω–∏: "–û—Ç –º–æ–µ–≥–æ –∏–º–µ–Ω–∏"
 *    - –ö—Ç–æ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø: "–í—Å–µ"
 * 8. –ù–∞–∂–º–∏—Ç–µ "–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å"
 * 9. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */

// ID –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü—ã (–±–µ—Ä–µ—Ç—Å—è –∏–∑ URL)
const SPREADSHEET_ID = '1PHrQ8ZwjrOc4_9QuvpQltuMpuSUGIlcb96lp6korbTA';
const SHEET_NAME = '–õ–∏—Å—Ç1';

// –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
const CATEGORY_NAMES = {
  'maintenance': '–¢–û',
  'testing': '–ò—Å–ø—ã—Ç–∞–Ω–∏—è', 
  'audit': '–ê—É–¥–∏—Ç',
  'pnr': '–ü–ù–†',
  'safety': '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
  'quality': '–ö–∞—á–µ—Å—Ç–≤–æ',
  'equipment': '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
  'process': '–ü—Ä–æ—Ü–µ—Å—Å—ã',
  'warranty': '–ì–∞—Ä–∞–Ω—Ç–∏—è',
  'other': '–î—Ä—É–≥–æ–µ'
};

// –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫
const METRIC_NAMES = {
  'design': '–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
  'installation': '–ú–æ–Ω—Ç–∞–∂',
  'interaction': '–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ', 
  'documentation': '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è',
  'control': '–ö–æ–Ω—Ç—Ä–æ–ª—å',
  'other': '–î—Ä—É–≥–æ–µ'
};

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ GET –∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
 */
function doGet(e) {
  const output = ContentService
    .createTextOutput(JSON.stringify({
      status: 'success',
      message: 'Google Sheets API —Ä–∞–±–æ—Ç–∞–µ—Ç!',
      spreadsheetId: SPREADSHEET_ID,
      timestamp: new Date().toISOString()
    }))
    .setMimeType(ContentService.MimeType.JSON);
  
  // –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
  output.setHeaders({
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Methods': 'GET,POST,OPTIONS',
    'Access-Control-Allow-Headers': 'Content-Type'
  });
  
  return output;
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ POST –∑–∞–ø—Ä–æ—Å–æ–≤
 */
function doPost(e) {
  try {
    console.log('üì± –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å:', new Date().toISOString());
    
    // –ü–∞—Ä—Å–∏–º –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    if (!e.postData || !e.postData.contents) {
      throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–ø—Ä–æ—Å–µ');
    }
    
    const requestData = JSON.parse(e.postData.contents);
    const action = requestData.action;
    const data = requestData.data;
    
    let result;
    
    switch(action) {
      case 'addSurvey':
        result = addSurveyData(data);
        break;
      default:
        throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ' + action);
    }
    
    const output = ContentService
      .createTextOutput(JSON.stringify({
        status: 'success',
        result: result,
        timestamp: new Date().toISOString()
      }))
      .setMimeType(ContentService.MimeType.JSON);
    
    // –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    output.setHeaders({
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET,POST,OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type'
    });
    
    return output;
      
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.toString());
    
    const output = ContentService
      .createTextOutput(JSON.stringify({
        status: 'error',
        message: error.toString(),
        timestamp: new Date().toISOString()
      }))
      .setMimeType(ContentService.MimeType.JSON);
    
    // –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–∞–∂–µ –¥–ª—è –æ—à–∏–±–æ–∫
    output.setHeaders({
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET,POST,OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type'
    });
    
    return output;
  }
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–ø—Ä–æ—Å–∞
 */
function addSurveyData(data) {
  try {
    const sheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(SHEET_NAME);
    
    if (!sheet) {
      throw new Error('–õ–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –µ—Å–ª–∏ –ª–∏—Å—Ç –ø—É—Å—Ç–æ–π
    if (sheet.getLastRow() === 0) {
      const headers = [
        '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è',
        '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã', 
        '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
        '–ú–µ—Ç—Ä–∏–∫–∞',
        '–û–ø–∏—Å–∞–Ω–∏–µ',
        '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è',
        'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
      ];
      sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
    if (!data.timestamp) {
      data.timestamp = new Date().toLocaleString('ru-RU');
    }
    
    // –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ —Ä—É—Å—Å–∫–∏–π
    const categoryRussian = CATEGORY_NAMES[data.category] || data.category;
    const metricRussian = METRIC_NAMES[data.metric] || data.metric;
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É
    const row = [
      data.timestamp,
      data.title || '',
      categoryRussian,
      metricRussian,
      data.description || '',
      data.imageBase64 || '',
      data.authorId || '',
      data.authorName || ''
    ];
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
    sheet.appendRow(row);
    
    return {
      message: '–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã',
      rowNumber: sheet.getLastRow()
    };
    
  } catch (error) {
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: ' + error.toString());
  }
} 